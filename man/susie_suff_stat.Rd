% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/susie_ss.R
\name{susie_suff_stat}
\alias{susie_suff_stat}
\title{Bayesian sum of single-effect (susie) linear regression using sufficient summary stat}
\usage{
susie_suff_stat(bhat, shat, R, n, var_y = 1, XtX, Xty, yty, maf = NULL,
  maf_thresh = 0, L = 10, scaled_prior_variance = 0.2,
  residual_variance = NULL, estimate_residual_variance = TRUE,
  estimate_prior_variance = TRUE, estimate_prior_method = c("optim",
  "EM"), r_tol = 1e-08, prior_weights = NULL, null_weight = NULL,
  standardize = TRUE, max_iter = 100, s_init = NULL,
  intercept_value = 0, coverage = 0.95, min_abs_corr = 0.5,
  tol = 0.001, verbose = FALSE, track_fit = FALSE,
  check_input = FALSE)
}
\arguments{
\item{bhat}{a p vector of estimated effects.}

\item{shat}{a p vector of corresponding standard errors.}

\item{R}{a p by p symmetric and positive semidefinite matrix. It can be X'X, covariance matrix (X'X/(n-1)) or correlation matrix.
It should from the same samples used to compute `bhat` and `shat`. Using out of sample matrix may produce unreliable results.}

\item{n}{sample size.}

\item{var_y}{the (sample) variance of y, defined as y'y/(n-1) . If it is unknown, the coefficients (returned from `coef`) are on the standardized X, y scale.}

\item{XtX}{a p by p matrix, X'X, where columns of X are centered to have mean 0}

\item{Xty}{a p vector, X'y, where columns of X are centered and y is centered to have mean 0}

\item{yty}{a scaler, y'y, where y is centered to have mean 0}

\item{maf}{minor allele frequency; to be used along with `maf_thresh` to filter input summary statistics}

\item{maf_thresh}{variants having MAF smaller than this threshold will be filtered out}

\item{L}{maximum number of non-zero effects}

\item{scaled_prior_variance}{the scaled prior variance (vector of length L, or scalar. In latter case gets repeated L times)}

\item{residual_variance}{the residual variance (defaults to variance of y)}

\item{estimate_residual_variance}{indicates whether to estimate residual variance}

\item{estimate_prior_variance}{indicates whether to estimate prior}

\item{estimate_prior_method}{The method used for estimating prior variance, 'optim' or 'EM'}

\item{r_tol}{tolerance level for eigen value check of positive semidefinite matrix of R.}

\item{prior_weights}{a p vector of prior probability that each element is non-zero}

\item{null_weight}{probability of no effect, for each single effect model}

\item{standardize}{logical flag (default=TRUE) for whether to adjust XtX and Xty such that they are computed from column standardized X, prior to fitting.
Note that `scaled_prior_variance` specifies the prior on the coefficients of X *after* standardization (if performed).
If you do not standardize you may need
to think more carefully about specifying
`scaled_prior_variance`. Whatever the value of standardize, the coefficients (returned from `coef`) are for X on the original input scale.}

\item{max_iter}{maximum number of iterations to perform}

\item{s_init}{a previous susie fit with which to initialize}

\item{intercept_value}{a value to assign to the intercept (since the intercept cannot be estimated from centered summary data). This
value will be used by coef.susie() to assign an intercept value, for consistency with the non-summary-statistic version of this function \code{susie}.
Set to NULL if you want coef.susie() not to include an intercept term (and so only return a p vector).}

\item{coverage}{coverage of confident sets. Default to 0.95 for 95\% credible interval.}

\item{min_abs_corr}{minimum of absolute value of correlation allowed in a credible set.}

\item{tol}{convergence tolerance based on alpha}

\item{verbose}{if true outputs some progress messages}

\item{track_fit}{add an attribute \code{trace} to output that saves current values of all iterations}

\item{check_input}{whether to perform checks on XtX and Xty, the checks are:

1. Check whether XtX is positive semidefinite

2. Check whether Xty in space spanned by the non-zero eigenvectors of XtX}
}
\value{
a susie fit, which is a list with some or all of the following elements\cr
\item{alpha}{an L by p matrix of posterior inclusion probabilites}
\item{mu}{an L by p matrix of posterior means (conditional on inclusion)}
\item{mu2}{an L by p matrix of posterior second moments (conditional on inclusion)}
\item{XtXr}{an p vector of t(X) times fitted values, the fitted values equal to X times colSums(alpha*mu))}
\item{sigma2}{residual variance}
\item{V}{prior variance}
}
\description{
Bayesian sum of single-effect (susie) linear regression using sufficient summary stat
}
\details{
Performs sum of single-effect (susie) linear regression of y on X when
only sufficient summary statistics are available. The sufficient summary data required are EITHER
the p vector bhat, the p vector shat, the p by p symmetric and positive semidefinite correlation
(or covariance) matrix R, the sample size n, the variance of y; OR
the p by p matrix X'X, the p vector X'y, the sum of squares of y (y'y) and the sample size.
The sufficient summary stats should come from the same individuals.
Both the columns of X and the vector y
should be centered to have mean 0 before
computing these summary statistics; you may also want to scale each column of X and y to have variance 1 (see examples).
This function fits the regression model y = sum_l Xb_l + e, where elements of e are iid N(0,var=residual_variance) and the
sum_l b_l is a p vector of effects to be estimated.
The assumption is that each b_l has exactly one non-zero element, with all elements
equally likely to be non-zero. The prior on the non-zero element is N(0,var=scaled_prior_variance*y'y/(n-1)).
}
\examples{
set.seed(1)
n    <- 1000
p    <- 1000
beta <- rep(0,p)
beta[1:4] <- 1
X        <- matrix(rnorm(n*p),nrow=n,ncol=p)
y        <- c(X \%*\% beta + rnorm(n))
input_ss <- compute_ss(X,y,standardize = TRUE)
ss = susieR:::univariate_regression(X, y)
res1      <- with(input_ss,susie_suff_stat(XtX = XtX,Xty = Xty, yty = yty,n))
coef(res1)
res2      <- with(ss,susie_suff_stat(bhat = betahat, shat = sebetahat, R = cov2cor(XtX), n, var_y = var(y)))
coef(res2)

}
